#include <bits/stdc++.h>
using namespace std;

#define FASTIO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

const int MOD = (int)1e9 + 7;

int K;
string S;
vector<int> pi;
vector<vector<int>> kmp_next_state;

void build_kmp_automaton() {
    int m = S.length();
    pi.assign(m, 0);
    for (int i = 1; i < m; i++) {
        int j = pi[i - 1];
        while (j > 0 && S[i] != S[j]) {
            j = pi[j - 1];
        }
        if (S[i] == S[j]) {
            j++;
        }
        pi[i] = j;
    }

    kmp_next_state.assign(m + 1, vector<int>(10));
    for (int j = 0; j <= m; ++j) {
        for (int d = 0; d < 10; ++d) {
            if (j < m && (S[j] - '0') == d) {
                kmp_next_state[j][d] = j + 1;
            } else {
                if (j > 0) {
                    kmp_next_state[j][d] = kmp_next_state[pi[j-1]][d];
                } else {
                    kmp_next_state[j][d] = 0;
                }
            }
        }
    }
}

void solve() {
    cin >> K >> S;
    int m = S.length();
    long long s_rem = 0;
    if (S != "0") {
        for(char c : S){
            s_rem = (s_rem * 10 + (c - '0')) % K;
        }
        if(s_rem == 0){
            cout << S << "\n";
            return;
        }
    }
    build_kmp_automaton();
    queue<pair<int, int>> q;
    map<int, map<int, pair<pair<int, int>, int>>> from;
    for (int d = 1; d <= 9; ++d) {
        int r = d % K;
        int j = kmp_next_state[0][d];
        if (from.find(r) == from.end() || from[r].find(j) == from[r].end()) {
             from[r][j] = {{-1, -1}, d};
             q.push({r, j});
        }
    }
    pair<int, int> target_state = {-1, -1};
    while (!q.empty()) {
        auto [r, j] = q.front();
        q.pop();
        if (j == m && r == 0) {
            target_state = {r, j};
            break;
        }
        for (int d = 0; d <= 9; ++d) {
            int nr = (r * 10 + d) % K;
            int nj = (j == m) ? m : kmp_next_state[j][d];
            if (from.find(nr) == from.end() || from[nr].find(nj) == from[nr].end()) {
                from[nr][nj] = {{r, j}, d};
                q.push({nr, nj});
            }
        }
    }
    string ans = "";
    pair<int, int> cur = target_state;
    while (cur.first != -1) {
        auto const& prev_info = from.at(cur.first).at(cur.second);
        ans += to_string(prev_info.second);
        cur = prev_info.first;
    }
    reverse(ans.begin(), ans.end());
    cout << ans << "\n";
}

int main() {
    FASTIO;
    int t = 1; 
    cin >> t;
    while (t--) solve();
    return 0;
}
